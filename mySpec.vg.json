{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "width": 800,
  "height": 600,
  "padding": 5,
  "data": [
    {"name": "gapminder", "url": "happiness_big.json"},
    {
      "name": "country_timeline",
      "source": "gapminder",
      "transform": [
        {
          "type": "filter",
          "expr": "timeline && datum.country == timeline.country"
        },
        {"type": "collect", "sort": {"field": "year"}}
      ]
    },
    {
      "name": "thisYear",
      "source": "gapminder",
      "transform": [{"type": "filter", "expr": "datum.year == currentYear"}]
    },
    {
      "name": "prevYear",
      "source": "gapminder",
      "transform": [
        {"type": "filter", "expr": "datum.year == currentYear - stepYear"}
      ]
    },
    {
      "name": "nextYear",
      "source": "gapminder",
      "transform": [
        {"type": "filter", "expr": "datum.year == currentYear + stepYear"}
      ]
    },
    {
      "name": "countries",
      "source": "gapminder",
      "transform": [{"type": "aggregate", "groupby": ["country"]}]
    },
    {
      "name": "interpolate",
      "source": "countries",
      "transform": [
        {
          "type": "lookup",
          "from": "thisYear",
          "key": "country",
          "fields": ["country"],
          "as": ["this"],
          "default": {}
        },
        {
          "type": "lookup",
          "from": "prevYear",
          "key": "country",
          "fields": ["country"],
          "as": ["prev"],
          "default": {}
        },
        {
          "type": "lookup",
          "from": "nextYear",
          "key": "country",
          "fields": ["country"],
          "as": ["next"],
          "default": {}
        },
        {
          "type": "formula",
          "as": "target_corruption",
          "expr": "interYear > currentYear ? datum.next.corruption : (datum.prev.corruption||datum.this.corruption)"
        },
        {
          "type": "formula",
          "as": "target_happy",
          "expr": "interYear > currentYear ? datum.next.happy : (datum.prev.happy||datum.this.happy)"
        },
        {
          "type": "formula",
          "as": "inter_corruption",
          "expr": "interYear==2016 ? datum.this.corruption : datum.this.corruption + (datum.target_corruption-datum.this.corruption) * abs(interYear-datum.this.year)/1"
        },
        {
          "type": "formula",
          "as": "inter_happy",
          "expr": "interYear==2016 ? datum.this.happy : datum.this.happy + (datum.target_happy-datum.this.happy) * abs(interYear-datum.this.year)/1"
        }
      ]
    },
    {
      "name": "trackCountries",
      "on": [{"trigger": "active", "toggle": "{country: active.country}"}]
    }
  ],
  "signals": [
    {"name": "minYear", "value": 2005},
    {"name": "maxYear", "value": 2017},
    {"name": "stepYear", "value": 1},
    {
      "name": " x-axis ", "value": "corruption",
      "bind": {
        "input": "select",
        "options": [
          "corruption",
          "GDP",
          "Health",
          "Freedom",
          "Trust",
          "Generosity"
        ]
      }
    },
    {
      "name": "active",
      "value": {},
      "on": [
        {"events": "@point:mousedown, @point:touchstart", "update": "datum"},
        {"events": "window:mouseup, window:touchend", "update": "{}"}
      ]
    },
    {"name": "isActive", "update": "active.country"},
    {
      "name": "timeline",
      "value": {},
      "on": [
        {"events": "@point:mouseover", "update": "isActive ? active : datum"},
        {"events": "@point:mouseout", "update": "active"},
        {"events": {"signal": "active"}, "update": "active"}
      ]
    },
    {
      "name": "tX",
      "on": [
        {
          "events": "mousemove!, touchmove!",
          "update": "isActive ? scale('x', active.this.corruption) : tX"
        }
      ]
    },
    {
      "name": "tY",
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? scale('y', active.this.happy) : tY"
        }
      ]
    },
    {
      "name": "pX",
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? scale('x', active.prev.corruption) : pX"
        }
      ]
    },
    {
      "name": "pY",
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? scale('y', active.prev.happy) : pY"
        }
      ]
    },
    {
      "name": "nX",
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? scale('x', active.next.corruption) : nX"
        }
      ]
    },
    {
      "name": "nY",
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? scale('y', active.next.happy) : nY"
        }
      ]
    },
    {
      "name": "thisDist",
      "value": 0,
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? sqrt(pow(x()-tX, 2) + pow(y()-tY, 2)) : thisDist"
        }
      ]
    },
    {
      "name": "prevDist",
      "value": 0,
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? sqrt(pow(x()-pX, 2) + pow(y()-pY, 2)): prevDist"
        }
      ]
    },
    {
      "name": "nextDist",
      "value": 0,
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? sqrt(pow(x()-nX, 2) + pow(y()-nY, 2)) : nextDist"
        }
      ]
    },
    {
      "name": "prevScore",
      "value": 0,
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? ((pX-tX) * (x()-tX) + (pY-tY) * (y()-tY))/prevDist || -999999 : prevScore"
        }
      ]
    },
    {
      "name": "nextScore",
      "value": 0,
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? ((nX-tX) * (x()-tX) + (nY-tY) * (y()-tY))/nextDist || -999999 : nextScore"
        }
      ]
    },
    {
      "name": "interYear",
      "value": 2012,
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? (min(maxYear, currentYear+1, max(minYear, currentYear-1, prevScore > nextScore ? (currentYear - 0.5*prevScore/sqrt(pow(pX-tX, 2) + pow(pY-tY, 2))) : (currentYear + 0.5*nextScore/sqrt(pow(nX-tX, 2) + pow(nY-tY, 2)))))) : interYear"
        }
      ]
    },
    {
      "name": "currentYear",
      "value": 2012,
      "on": [
        {
          "events": "mousemove, touchmove",
          "update": "isActive ? (min(maxYear, max(minYear, prevScore > nextScore ? (thisDist < prevDist ? currentYear : currentYear-1) : (thisDist < nextDist ? currentYear : currentYear+1)))) : currentYear"
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "x",
      "type": "linear",
      "nice": true,
      "domain": {"data": "gapminder", "field": "corruption"},
      "range": "width"
    },
    {
      "name": "y",
      "type": "linear",
      "nice": true,
      "zero": false,
      "domain": {"data": "gapminder", "field": "happy"},
      "range": "height"
    },
    {
      "name": "color",
      "type": "ordinal",
      "domain": {"data": "gapminder", "field": "region"},
      "range": "category"
    },
    {
      "name": "label",
      "type": "ordinal",
      "domain": {"data": "gapminder", "field": "region"},
      "range": {"data": "gapminder", "field": "region"}
    }
  ],
  "axes": [
    {
      "title": "Corruption",
      "orient": "bottom",
      "scale": "x",
      "grid": true,
      "tickCount": 5
    },
    {
      "title": "Happiness Score",
      "orient": "left",
      "scale": "y",
      "grid": true,
      "tickCount": 5
    }
  ],
  "legends": [
    {
      "fill": "color",
      "title": "Region",
      "orient": "right",
      "encode": {
        "symbols": {"enter": {"fillOpacity": {"value": 0.5}}},
        "labels": {"update": {"text": {"scale": "label", "field": "value"}}}
      }
    }
  ],
  "marks": [
    {
      "type": "text",
      "encode": {
        "update": {
          "text": {"signal": "currentYear"},
          "x": {"value": 100},
          "y": {"value": 500},
          "fill": {"value": "grey"},
          "fillOpacity": {"value": 0.25},
          "fontSize": {"value": 100}
        }
      }
    },
    {
      "type": "text",
      "from": {"data": "country_timeline"},
      "interactive": false,
      "encode": {
        "enter": {
          "x": {"scale": "x", "field": "corruption", "offset": 5},
          "y": {"scale": "y", "field": "happy"},
          "fill": {"value": "#555"},
          "fillOpacity": {"value": 0.6},
          "text": {"field": "year"}
        }
      }
    },
    {
      "type": "line",
      "from": {"data": "country_timeline"},
      "encode": {
        "update": {
          "x": {"scale": "x", "field": "corruption"},
          "y": {"scale": "y", "field": "happy"},
          "stroke": {"value": "#bbb"},
          "strokeWidth": {"value": 5},
          "strokeOpacity": {"value": 0.5}
        }
      }
    },
    {
      "name": "point",
      "type": "symbol",
      "from": {"data": "interpolate"},
      "encode": {
        "enter": {
          "fill": {"scale": "color", "field": "this.region"},
          "size": {"value": 150}
        },
        "update": {
          "x": {"scale": "x", "field": "inter_corruption"},
          "y": {"scale": "y", "field": "inter_happy"},
          "fillOpacity": [
            {
              "test": "datum.country==timeline.country || indata('trackCountries', 'country', datum.country)",
              "value": 1
            },
            {"value": 0.5}
          ]
        }
      }
    },
    {
      "type": "text",
      "from": {"data": "interpolate"},
      "interactive": false,
      "encode": {
        "enter": {
          "fill": {"value": "#333"},
          "fontSize": {"value": 14},
          "fontWeight": {"value": "bold"},
          "text": {"field": "country"},
          "align": {"value": "center"},
          "baseline": {"value": "bottom"}
        },
        "update": {
          "x": {"scale": "x", "field": "inter_corruption"},
          "y": {"scale": "y", "field": "inter_happy", "offset": -7},
          "fillOpacity": [
            {
              "test": "datum.country==timeline.country || indata('trackCountries', 'country', datum.country)",
              "value": 0.8
            },
            {"value": 0}
          ]
        }
      }
    }
  ]
}
